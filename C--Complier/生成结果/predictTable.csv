,==,<=,void,const,%,(,),*,+,",",-,INT,int,/,IDN,;,{,!=,<,=,},return,>,>=
argFunctionR,,,,,,,argFunctionR -> $,,,"argFunctionR -> , funcRParam argFunctionR",,,,,,,,,,,,,,
eqExpAtom,eqExpAtom -> == relExp eqExpAtom,,,,,,eqExpAtom -> $,,,eqExpAtom -> $,,,,,,eqExpAtom -> $,,eqExpAtom -> != relExp eqExpAtom,,eqExpAtom -> $,,,,
decl,,,,decl -> constDecl,,,,,,,,,decl -> varDecl,,,,,,,,,,,
constInitVal,,,,,,,,,,,,constInitVal -> constExp,,,constInitVal -> constExp,,,,,,,,,
constDef,,,,,,,,,,,,,,,constDef -> IDN = constInitVal,,,,,,,,,
compUnit,,,compUnit -> funcDef compUnit,compUnit -> decl compUnit,,,,,,,,,compUnit -> decl compUnit,,,,,,,,,,,
funcRParam,,,,,,,,,,,,funcRParam -> exp,,,funcRParam -> exp,,,,,,,,,
addExp,,,,,,,,,,,,addExp -> mulExp addExpAtom,,,addExp -> mulExp addExpAtom,,,,,,,,,
program,,,program -> compUnit,program -> compUnit,,,,,,,,,program -> compUnit,,,,,,,,,,,
addExpAtom,addExpAtom -> $,addExpAtom -> $,,,,,addExpAtom -> $,,addExpAtom -> + mulExp addExpAtom,addExpAtom -> $,addExpAtom -> - mulExp addExpAtom,,,,,addExpAtom -> $,,addExpAtom -> $,addExpAtom -> $,addExpAtom -> $,,,addExpAtom -> $,addExpAtom -> $
relExp,,,,,,,,,,,,relExp -> addExp relExpAtom,,,relExp -> addExp relExpAtom,,,,,,,,,
mulExpAtom,mulExpAtom -> $,mulExpAtom -> $,,,mulExpAtom -> % unaryExp mulExpAtom,,mulExpAtom -> $,mulExpAtom -> * unaryExp mulExpAtom,mulExpAtom -> $,mulExpAtom -> $,mulExpAtom -> $,,,mulExpAtom -> / unaryExp mulExpAtom,,mulExpAtom -> $,,mulExpAtom -> $,mulExpAtom -> $,mulExpAtom -> $,,,mulExpAtom -> $,mulExpAtom -> $
funcRParams,,,,,,,funcRParams -> $,,,,,funcRParams -> funcRParam argFunctionR,,,funcRParams -> funcRParam argFunctionR,,,,,,,,,
argVarDecl,,,,,,,,,,"argVarDecl -> , varDef argVarDecl",,,,,,argVarDecl -> $,,,,,,,,
initVal,,,,,,,,,,,,initVal -> exp,,,initVal -> exp,,,,,,,,,
number,,,,,,,,,,,,number -> INT,,,,,,,,,,,,
argConst,,,,,,,,,,"argConst -> , constDef argConst",,,,,,argConst -> $,,,,,,,,
eqExp,,,,,,,,,,,,eqExp -> relExp eqExpAtom,,,eqExp -> relExp eqExpAtom,,,,,,,,,
funcFParams,,,,,,,funcFParams -> $,,,,,,funcFParams -> funcFParam argFunctionF,,,,,,,,,,,
block,,,,,,,,,,,,,,,,,block -> { blockItem },,,,,,,
mulExp,,,,,,,,,,,,mulExp -> unaryExp mulExpAtom,,,mulExp -> unaryExp mulExpAtom,,,,,,,,,
argExp,,,,,,,,,,,,argExp -> exp,,,argExp -> exp,argExp -> $,,,,,,,,
exp,,,,,,,,,,,,exp -> assignExp,,,exp -> assignExp,,,,,,,,,
constExp,,,,,,,,,,,,constExp -> assignExp,,,constExp -> assignExp,,,,,,,,,
funcType,,,funcType -> void,,,,,,,,,,,,,,,,,,,,,
assignExp,,,,,,,,,,,,assignExp -> eqExp assignExpAtom,,,assignExp -> eqExp assignExpAtom,,,,,,,,,
relExpAtom,relExpAtom -> $,relExpAtom -> <= addExp relExpAtom,,,,,relExpAtom -> $,,,relExpAtom -> $,,,,,,relExpAtom -> $,,relExpAtom -> $,relExpAtom -> < addExp relExpAtom,relExpAtom -> $,,,relExpAtom -> > addExp relExpAtom,relExpAtom -> >= addExp relExpAtom
constDecl,,,,constDecl -> const bType constDef argConst ;,,,,,,,,,,,,,,,,,,,,
assignExpAtom,,,,,,,assignExpAtom -> $,,,assignExpAtom -> $,,,,,,assignExpAtom -> $,,,,assignExpAtom -> = eqExp assignExpAtom,,,,
callFunc,callFunc -> $,callFunc -> $,,,callFunc -> $,callFunc -> ( funcRParams ),callFunc -> $,callFunc -> $,callFunc -> $,callFunc -> $,callFunc -> $,,,callFunc -> $,,callFunc -> $,,callFunc -> $,callFunc -> $,callFunc -> $,,,callFunc -> $,callFunc -> $
bType,,,,,,,,,,,,,bType -> int,,,,,,,,,,,
unaryExp,,,,,,,,,,,,unaryExp -> number,,,unaryExp -> IDN callFunc,,,,,,,,,
argVarDef,,,,,,,,,,argVarDef -> $,,,,,,argVarDef -> $,,,,argVarDef -> = initVal,,,,
funcFParam,,,,,,,,,,,,,funcFParam -> bType IDN,,,,,,,,,,,
varDef,,,,,,,,,,,,,,,varDef -> IDN argVarDef,,,,,,,,,
blockItem,,,,blockItem -> decl blockItem,,,,,,,,blockItem -> stmt blockItem,blockItem -> decl blockItem,,blockItem -> stmt blockItem,blockItem -> stmt blockItem,blockItem -> stmt blockItem,,,,blockItem -> $,blockItem -> stmt blockItem,,
argFunctionF,,,,,,,argFunctionF -> $,,,"argFunctionF -> , funcFParam argFunctionF",,,,,,,,,,,,,,
varDecl,,,,,,,,,,,,,varDecl -> bType varDef argVarDecl ;,,,,,,,,,,,
stmt,,,,,,,,,,,,stmt -> exp ;,,,stmt -> exp ;,stmt -> ;,stmt -> block,,,,,stmt -> return argExp ;,,
funcDef,,,funcDef -> funcType IDN ( funcFParams ) block,,,,,,,,,,,,,,,,,,,,,
